/*
Deployment script for DB_Epreuve_ASP

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DB_Epreuve_ASP"
:setvar DefaultFilePrefix "DB_Epreuve_ASP"
:setvar DefaultDataPath "C:\Users\m.chanu\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\m.chanu\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Emprunt]...';


GO
CREATE TABLE [dbo].[Emprunt] (
    [Emprunt_Id]           UNIQUEIDENTIFIER NOT NULL,
    [Jeux_Utilisateur_Id]  UNIQUEIDENTIFIER NOT NULL,
    [Emprunteur_Id]        UNIQUEIDENTIFIER NOT NULL,
    [DateEmprunt]          DATE             NOT NULL,
    [DateRetour]           DATE             NULL,
    [EvaluationPreteur]    DECIMAL (2, 1)   NULL,
    [EvaluationEmprunteur] DECIMAL (2, 1)   NULL
);


GO
PRINT N'Creating Table [dbo].[Jeux]...';


GO
CREATE TABLE [dbo].[Jeux] (
    [Jeu_Id]       UNIQUEIDENTIFIER NOT NULL,
    [Nom]          VARCHAR (255)    NOT NULL,
    [Description]  VARCHAR (MAX)    NOT NULL,
    [AgeMin]       INT              NOT NULL,
    [AgeMax]       INT              NOT NULL,
    [NbJoueurMin]  INT              NOT NULL,
    [NbJoueurMax]  INT              NOT NULL,
    [DureeMinute]  DECIMAL (3, 1)   NULL,
    [DateCreation] DATE             NOT NULL,
    CONSTRAINT [PK_Jeux] PRIMARY KEY CLUSTERED ([Jeu_Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Jeux_Tag]...';


GO
CREATE TABLE [dbo].[Jeux_Tag] (
    [Jeu_Tag_Id] UNIQUEIDENTIFIER NOT NULL,
    [Jeu_Id]     UNIQUEIDENTIFIER NOT NULL,
    [Tag_Id]     UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY CLUSTERED ([Jeu_Tag_Id] ASC),
    CONSTRAINT [UQ_Jeux_Tags] UNIQUE NONCLUSTERED ([Jeu_Id] ASC, [Tag_Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Jeux_Utilisateur]...';


GO
CREATE TABLE [dbo].[Jeux_Utilisateur] (
    [Jeux_Utilisateur_Id] UNIQUEIDENTIFIER NOT NULL,
    [Utilisateur_Id]      UNIQUEIDENTIFIER NOT NULL,
    [Jeu_Id]              UNIQUEIDENTIFIER NOT NULL,
    [DateAcquisition]     DATE             NULL,
    [Etat]                VARCHAR (20)     NOT NULL,
    PRIMARY KEY CLUSTERED ([Jeux_Utilisateur_Id] ASC),
    CONSTRAINT [UQ_Utilisateur_Jeux] UNIQUE NONCLUSTERED ([Utilisateur_Id] ASC, [Jeu_Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Tag]...';


GO
CREATE TABLE [dbo].[Tag] (
    [Tag_Id] UNIQUEIDENTIFIER NOT NULL,
    [Nom]    VARCHAR (100)    NOT NULL,
    CONSTRAINT [PK_Tag] PRIMARY KEY CLUSTERED ([Tag_Id] ASC),
    UNIQUE NONCLUSTERED ([Nom] ASC)
);


GO
PRINT N'Creating Table [dbo].[Utilisateur]...';


GO
CREATE TABLE [dbo].[Utilisateur] (
    [Utilisateur_Id] UNIQUEIDENTIFIER NOT NULL,
    [Email]          NVARCHAR (320)   NOT NULL,
    [Password]       VARBINARY (64)   NOT NULL,
    [Salt]           UNIQUEIDENTIFIER NOT NULL,
    [Pseudo]         NVARCHAR (64)    NOT NULL,
    [CreatedAt]      DATETIME2 (7)    NOT NULL,
    [DisabledAt]     DATETIME2 (7)    NULL,
    CONSTRAINT [PK_Utilisateur] PRIMARY KEY CLUSTERED ([Utilisateur_Id] ASC),
    CONSTRAINT [UQ_Email] UNIQUE NONCLUSTERED ([Email] ASC),
    CONSTRAINT [UQ_Pseudo] UNIQUE NONCLUSTERED ([Pseudo] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Emprunt]...';


GO
ALTER TABLE [dbo].[Emprunt]
    ADD DEFAULT NEWID() FOR [Emprunt_Id];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Jeux]...';


GO
ALTER TABLE [dbo].[Jeux]
    ADD DEFAULT NEWID() FOR [Jeu_Id];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Jeux]...';


GO
ALTER TABLE [dbo].[Jeux]
    ADD DEFAULT GETDATE() FOR [DateCreation];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Jeux_Tag]...';


GO
ALTER TABLE [dbo].[Jeux_Tag]
    ADD DEFAULT NEWID() FOR [Jeu_Tag_Id];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Jeux_Utilisateur]...';


GO
ALTER TABLE [dbo].[Jeux_Utilisateur]
    ADD DEFAULT NEWID() FOR [Jeux_Utilisateur_Id];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Jeux_Utilisateur]...';


GO
ALTER TABLE [dbo].[Jeux_Utilisateur]
    ADD DEFAULT GETDATE() FOR [DateAcquisition];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Tag]...';


GO
ALTER TABLE [dbo].[Tag]
    ADD DEFAULT NEWID() FOR [Tag_Id];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Utilisateur]...';


GO
ALTER TABLE [dbo].[Utilisateur]
    ADD DEFAULT NEWID() FOR [Utilisateur_Id];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Utilisateur]...';


GO
ALTER TABLE [dbo].[Utilisateur]
    ADD DEFAULT GETDATE() FOR [CreatedAt];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Emprunt_Jeux_Utilisateur]...';


GO
ALTER TABLE [dbo].[Emprunt]
    ADD CONSTRAINT [FK_Emprunt_Jeux_Utilisateur] FOREIGN KEY ([Jeux_Utilisateur_Id]) REFERENCES [dbo].[Jeux_Utilisateur] ([Jeux_Utilisateur_Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Emprunt_Utilisateur]...';


GO
ALTER TABLE [dbo].[Emprunt]
    ADD CONSTRAINT [FK_Emprunt_Utilisateur] FOREIGN KEY ([Emprunteur_Id]) REFERENCES [dbo].[Utilisateur] ([Utilisateur_Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Jeux_Tags_Jeu]...';


GO
ALTER TABLE [dbo].[Jeux_Tag]
    ADD CONSTRAINT [FK_Jeux_Tags_Jeu] FOREIGN KEY ([Jeu_Id]) REFERENCES [dbo].[Jeux] ([Jeu_Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Jeux_Tags_Tag]...';


GO
ALTER TABLE [dbo].[Jeux_Tag]
    ADD CONSTRAINT [FK_Jeux_Tags_Tag] FOREIGN KEY ([Tag_Id]) REFERENCES [dbo].[Tag] ([Tag_Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Utilisateur_Jeux_Utilisateur]...';


GO
ALTER TABLE [dbo].[Jeux_Utilisateur]
    ADD CONSTRAINT [FK_Utilisateur_Jeux_Utilisateur] FOREIGN KEY ([Utilisateur_Id]) REFERENCES [dbo].[Utilisateur] ([Utilisateur_Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Utilisateur_Jeux_Jeux]...';


GO
ALTER TABLE [dbo].[Jeux_Utilisateur]
    ADD CONSTRAINT [FK_Utilisateur_Jeux_Jeux] FOREIGN KEY ([Jeu_Id]) REFERENCES [dbo].[Jeux] ([Jeu_Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Check Constraint unnamed constraint on [dbo].[Emprunt]...';


GO
ALTER TABLE [dbo].[Emprunt]
    ADD CHECK ([EvaluationPreteur] BETWEEN 0 AND 5);


GO
PRINT N'Creating Check Constraint unnamed constraint on [dbo].[Emprunt]...';


GO
ALTER TABLE [dbo].[Emprunt]
    ADD CHECK ([EvaluationEmprunteur] BETWEEN 0 AND 5);


GO
PRINT N'Creating Check Constraint unnamed constraint on [dbo].[Jeux]...';


GO
ALTER TABLE [dbo].[Jeux]
    ADD CHECK ([AgeMin] >= 0);


GO
PRINT N'Creating Check Constraint unnamed constraint on [dbo].[Jeux]...';


GO
ALTER TABLE [dbo].[Jeux]
    ADD CHECK ([AgeMax] >= [AgeMin]);


GO
PRINT N'Creating Check Constraint unnamed constraint on [dbo].[Jeux]...';


GO
ALTER TABLE [dbo].[Jeux]
    ADD CHECK ([NbJoueurMin] > 0);


GO
PRINT N'Creating Check Constraint unnamed constraint on [dbo].[Jeux]...';


GO
ALTER TABLE [dbo].[Jeux]
    ADD CHECK ([NbJoueurMax] >= [NbJoueurMin]);


GO
PRINT N'Creating Check Constraint unnamed constraint on [dbo].[Jeux]...';


GO
ALTER TABLE [dbo].[Jeux]
    ADD CHECK ([DureeMinute] >= 0);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Etat_Jeu]...';


GO
ALTER TABLE [dbo].[Jeux_Utilisateur]
    ADD CONSTRAINT [CK_Etat_Jeu] CHECK ([Etat] IN ('Neuf', 'Abimé', 'Incomplet'));


GO
PRINT N'Creating Function [dbo].[SF_SaltAndHash]...';


GO
CREATE FUNCTION [dbo].[SF_SaltAndHash]
(
	@password NVARCHAR(32),
	@salt UNIQUEIDENTIFIER
)
RETURNS VARBINARY(64)
AS
BEGIN
	DECLARE @saltedPassword NVARCHAR(68)
	SET @saltedPassword = CONCAT(@password,@salt)
	RETURN HASHBYTES('SHA2_512',@saltedPassword)
END
GO
PRINT N'Creating Procedure [dbo].[SP_Check_Password]...';


GO
CREATE PROCEDURE [dbo].[SP_Check_Password]
    @Email NVARCHAR(320),
    @Password NVARCHAR(32)
AS
BEGIN
    DECLARE @Salt UNIQUEIDENTIFIER;
    DECLARE @StoredPassword VARBINARY(64);
    
    -- Récupérer le sel et le mot de passe haché
    SELECT @Salt = Salt, 
           @StoredPassword = Password
    FROM dbo.Utilisateur
    WHERE Email = @Email;

    -- Si le sel existe (l'email est valide)
    IF @Salt IS NOT NULL
    BEGIN
        -- Saler et hacher le mot de passe fourni
        DECLARE @HashedPassword VARBINARY(64);
        SET @HashedPassword = dbo.SF_SaltAndHash(@Password, @Salt);

        -- Vérifier si le mot de passe correspond
        IF @HashedPassword = @StoredPassword
        BEGIN
            -- Si le mot de passe est correct
            SELECT 1 AS IsValid;  -- 1 = Valide
        END
        ELSE
        BEGIN
            -- Si le mot de passe est incorrect
            SELECT 0 AS IsValid;  -- 0 = Invalide
        END
    END
    ELSE
    BEGIN
        -- Si l'email n'existe pas
        SELECT 0 AS IsValid;  -- 0 = Invalide
    END
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Cloturer_Emprunt]...';


GO
CREATE PROCEDURE [dbo].[SP_Cloturer_Emprunt]
    @Emprunt_Id UNIQUEIDENTIFIER,             -- L'ID de l'emprunt
    @DateRetour DATE,                         -- La date de retour
    @EvaluationPreteur DECIMAL(2, 1),         -- L'évaluation du prêteur
    @EvaluationEmprunteur DECIMAL(2, 1)       -- L'évaluation de l'emprunteur
AS
BEGIN
    -- Mettre à jour la table Emprunt avec la date de retour et les évaluations
    UPDATE dbo.Emprunt
    SET DateRetour = @DateRetour, 
        EvaluationPreteur = @EvaluationPreteur,
        EvaluationEmprunteur = @EvaluationEmprunteur
    WHERE Emprunt_Id = @Emprunt_Id;

END
GO
PRINT N'Creating Procedure [dbo].[SP_Create_Emprunt]...';


GO
CREATE PROCEDURE [dbo].[SP_Create_Emprunt]
    @Utilisateur_Id UNIQUEIDENTIFIER,    -- L'ID de l'utilisateur emprunteur
    @Jeu_Id UNIQUEIDENTIFIER,             -- L'ID du jeu emprunté
    @DateEmprunt DATE                     -- La date de l'emprunt
AS
BEGIN
    -- Vérifier si l'utilisateur possède un exemplaire du jeu et si l'état est valide (pas "Incomplet")
    DECLARE @Jeux_Utilisateur_Id UNIQUEIDENTIFIER;

    SELECT @Jeux_Utilisateur_Id = Jeux_Utilisateur_Id
    FROM dbo.Jeux_Utilisateur
    WHERE Jeu_Id = @Jeu_Id 
    AND Utilisateur_Id = @Utilisateur_Id 
    AND Etat != 'Incomplet';

    -- Si un exemplaire valide du jeu est trouvé, on peut procéder à l'emprunt
    IF @Jeux_Utilisateur_Id IS NOT NULL
    BEGIN
        -- Ajouter l'emprunt dans la table Emprunt
        INSERT INTO dbo.Emprunt (Jeux_Utilisateur_Id, Emprunteur_Id, DateEmprunt)
        VALUES (@Jeux_Utilisateur_Id, @Utilisateur_Id, @DateEmprunt);
    END
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Create_Jeu]...';


GO
CREATE PROCEDURE [dbo].[SP_Create_Jeu]
@Utilisateur_Id UNIQUEIDENTIFIER,    -- L'ID de l'utilisateur qui ajoute le jeu
    @Nom VARCHAR(255),                    -- Le nom du jeu
    @Description TEXT,                    -- La description du jeu
    @AgeMin INT,                          -- L'âge minimum recommandé pour jouer
    @AgeMax INT,                          -- L'âge maximum recommandé pour jouer
    @NbJoueurMin INT,                     -- Le nombre minimum de joueurs
    @NbJoueurMax INT,                     -- Le nombre maximum de joueurs
    @DureeMinute DECIMAL(3,1),            -- La durée approximative du jeu en minutes
    @Etat VARCHAR(50)                     -- L'état du jeu (Neuf, Abimé, Incomplet)
AS
BEGIN
    -- Insérer le jeu dans la table 'Jeux' avec l'utilisateur associé
    DECLARE @Jeu_Id UNIQUEIDENTIFIER = NEWID(); -- Créer un nouvel ID pour le jeu
    INSERT INTO dbo.Jeux 
        (Jeu_Id, Nom, Description, AgeMin, AgeMax, NbJoueurMin, NbJoueurMax, DureeMinute, DateCreation)
    VALUES 
        (@Jeu_Id, @Nom, @Description, @AgeMin, @AgeMax, @NbJoueurMin, @NbJoueurMax, @DureeMinute, GETDATE());

    -- Ajouter ce jeu à la collection de l'utilisateur dans la table 'Jeux_Utilisateur'
    INSERT INTO dbo.Jeux_Utilisateur 
        (Utilisateur_Id, Jeu_Id, Etat, DateAcquisition)
    VALUES 
        (@Utilisateur_Id, @Jeu_Id, @Etat, GETDATE());
    
    -- Retourner l'ID du jeu créé pour référence
    SELECT @Jeu_Id AS JeuId;
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Create_Utilisateur]...';


GO
CREATE PROCEDURE [dbo].[SP_Create_Utilisateur]
    @Email NVARCHAR(320),
    @Password VARBINARY(64),         -- Le mot de passe déjà salé et haché
    @Salt UNIQUEIDENTIFIER,         -- Le sel généré pour cet utilisateur
    @Pseudo NVARCHAR(64)            -- Le pseudo de l'utilisateur
AS
BEGIN
    -- Insérer l'utilisateur avec le mot de passe haché, le sel et le pseudo dans la table Utilisateur
    INSERT INTO dbo.Utilisateur (Email, Password, Salt, Pseudo, CreatedAt)
    VALUES (@Email, @Password, @Salt, @Pseudo, GETDATE());
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Delete_Jeu]...';


GO
CREATE PROCEDURE [dbo].[SP_Delete_Jeu]
    @Utilisateur_Id UNIQUEIDENTIFIER,   -- L'ID de l'utilisateur qui veut supprimer l'exemplaire
    @Jeu_Id UNIQUEIDENTIFIER            -- L'ID du jeu (identifiant du jeu dans la collection de l'utilisateur)
AS
BEGIN
    -- Suppression de l'exemplaire du jeu de la table 'Jeux_Utilisateur' 
    DELETE FROM dbo.Jeux_Utilisateur
    WHERE Jeu_Id = @Jeu_Id 
      AND Utilisateur_Id = @Utilisateur_Id;

END;
GO
PRINT N'Creating Procedure [dbo].[SP_Delete_Utilisateur]...';


GO
CREATE PROCEDURE [dbo].[SP_Delete_Utilisateur]
    @Utilisateur_Id UNIQUEIDENTIFIER
AS
BEGIN
    UPDATE dbo.Utilisateur
    SET DisabledAt = GETDATE()
    WHERE Utilisateur_Id = @Utilisateur_Id;
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Get_Jeu]...';


GO
CREATE PROCEDURE [dbo].[SP_Get_Jeu]
    @Jeu_Id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT * FROM dbo.Jeux WHERE Jeu_Id = @Jeu_Id;
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Get_Jeux_By_Tag]...';


GO
CREATE PROCEDURE [dbo].[SP_Get_Jeux_By_Tag]
    @Tag_Nom VARCHAR(100)  -- Le nom du tag pour lequel on recherche les jeux
AS
BEGIN
    -- Sélectionner tous les jeux associés au tag spécifié
    SELECT 
        j.Jeu_Id,                  -- L'ID du jeu
        j.Nom,                     -- Le nom du jeu
        j.Description,             -- La description du jeu
        j.AgeMin,                  -- L'âge minimum recommandé pour le jeu
        j.AgeMax,                  -- L'âge maximum recommandé pour le jeu
        j.NbJoueurMin,             -- Le nombre minimum de joueurs pour le jeu
        j.NbJoueurMax,             -- Le nombre maximum de joueurs pour le jeu
        j.DureeMinute,             -- La durée approximative d'une partie du jeu en minutes
        t.Nom AS Tag_Nom           -- Le nom du tag associé
    FROM dbo.Jeux j
    INNER JOIN dbo.Jeux_Tag jt
        ON j.Jeu_Id = jt.Jeu_Id
    INNER JOIN dbo.Tag t
        ON jt.Tag_Id = t.Tag_Id
    WHERE t.Nom LIKE '%' + @Tag_Nom + '%';  -- Utiliser un LIKE pour rechercher des jeux par nom de tag
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Get_Jeux_Utilisateur]...';


GO
CREATE PROCEDURE [dbo].[SP_Get_Jeux_Utilisateur]
    @Utilisateur_Id UNIQUEIDENTIFIER  -- L'ID de l'utilisateur pour lequel on récupère les jeux
AS
BEGIN
    -- Sélectionner tous les jeux appartenant à l'utilisateur
    SELECT 
        ju.Jeux_Utilisateur_Id,   -- L'identifiant unique de la relation entre l'utilisateur et le jeu
        j.Nom,                     -- Le nom du jeu
        j.Description,              -- La description du jeu
        j.AgeMin,                   -- L'âge minimum recommandé pour le jeu
        j.AgeMax,                   -- L'âge maximum recommandé pour le jeu
        j.NbJoueurMin,              -- Le nombre minimum de joueurs pour le jeu
        j.NbJoueurMax,              -- Le nombre maximum de joueurs pour le jeu
        j.DureeMinute,              -- La durée approximative d'une partie du jeu en minutes
        ju.Etat,                    -- L'état du jeu (Neuf, Abimé, Incomplet)
        ju.DateAcquisition          -- La date d'acquisition du jeu
    FROM dbo.Jeux_Utilisateur ju
    INNER JOIN dbo.Jeux j
        ON ju.Jeu_Id = j.Jeu_Id
    WHERE ju.Utilisateur_Id = @Utilisateur_Id;
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Get_Utilisateur]...';


GO
CREATE PROCEDURE [dbo].[SP_Get_Utilisateur]
    @Utilisateur_Id UNIQUEIDENTIFIER
AS
BEGIN
    SELECT * FROM dbo.Utilisateur WHERE Utilisateur_Id = @Utilisateur_Id;
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Update_Jeu]...';


GO
CREATE PROCEDURE [dbo].[SP_Update_Jeu]
    @Utilisateur_Id UNIQUEIDENTIFIER,    -- L'ID de l'utilisateur qui modifie son exemplaire
    @Jeu_Id UNIQUEIDENTIFIER,             -- L'ID du jeu à modifier
    @Etat VARCHAR(50)                     -- Nouveau statut de l'exemplaire (Neuf, Abimé, Incomplet)
AS
BEGIN
    -- Mettre à jour l'état du jeu dans la table 'Jeux_Utilisateur'
    UPDATE dbo.Jeux_Utilisateur
    SET 
        Etat = @Etat
    WHERE 
        Utilisateur_Id = @Utilisateur_Id
        AND Jeu_Id = @Jeu_Id;
END;
GO
PRINT N'Creating Procedure [dbo].[SP_Update_Utilisateur]...';


GO
CREATE PROCEDURE [dbo].[SP_Update_Utilisateur]
    @Utilisateur_Id UNIQUEIDENTIFIER,
    @Pseudo NVARCHAR(64)
AS
BEGIN
    UPDATE dbo.Utilisateur
    SET Pseudo = @Pseudo
    WHERE Utilisateur_Id = @Utilisateur_Id;
END;
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
